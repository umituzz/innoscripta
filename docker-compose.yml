version: '3.9'

services:
  backend:
    container_name: 'backend'
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_HOST: mysql
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: password
    ports:
      - 8000:8000
    depends_on:
      - mysql
    networks:
      - app

  frontend:
    container_name: 'frontend'
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    command: npm start
    networks:
      - app

  mysql:
    container_name: 'mysql'
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_USER: laravel
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    ports:
      - 8889:3306
    volumes:
      - ./docker/volumes/mysql:/var/lib/mysql
    networks:
      - app

  phpmyadmin:
    container_name: 'phpmyadmin'
    image: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - 8080:80
    depends_on:
      - mysql
    networks:
      - app

  postgres:
    container_name: "postgres"
    image: postgres:latest
    volumes:
      - "./docker/volumes/postgres:/var/lib/postgres"
    environment:
      - POSTGRES_DB=laravel
      - POSTGRES_USER=laravel
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    networks:
      - app
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
      retries: 3
      timeout: 5s

  phppgadmin:
    container_name: 'phppgadmin'
    image: 'dpage/pgadmin4'
    environment:
      PGADMIN_DEFAULT_EMAIL: 'laravel@gmail.com'
      PGADMIN_DEFAULT_PASSWORD: 'password'
    ports:
      - 8083:80
    depends_on:
      - postgres
    networks:
      - app

  redis:
    container_name: 'redis'
    image: 'redis:alpine'
    ports:
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - ./docker/volumes/redis:/data
    networks:
      - app

  elasticsearch:
    container_name: 'elasticsearch'
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.15.0'
    environment:
      - discovery.type=single-node
    ports:
      - '9200:9200'
    networks:
      - app

  nodejs:
    container_name: 'nodejs'
    build:
      context: ./microservices/nodejs
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    networks:
      - app
    depends_on:
      - mongodb

  golang:
    container_name: 'golang'
    build:
      context: ./microservices/golang
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    networks:
      - app
    depends_on:
      - mongodb

  python:
    container_name: 'python'
    build:
      context: ./microservices/python
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - app
    depends_on:
      - mongodb

  mongodb:
    container_name: 'mongodb'
    image: mongo:4.4
    environment:
      MONGO_INITDB_DATABASE: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./docker/volumes/mongodb:/data/db
    networks:
      - app
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb-ui:
    container_name: 'mongodb-ui'
    image: mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_BASICAUTH_USERNAME: laravel
      ME_CONFIG_BASICAUTH_PASSWORD: password
    ports:
      - 8081:8081
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  mysql:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/mysql
  redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/redis
  postgres:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/postgres
  mongodb:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/volumes/mongodb